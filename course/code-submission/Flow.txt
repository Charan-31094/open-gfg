Install CV Session Exporter Extension
then Open the target Page
Click Export
Log into session.softpage.tech you will find session id


GFG Data Id Gen - I has required headers that are required to post a code

const puppeteer = require('puppeteer');
const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));

async function puppeteerScript(id, email) {
  try {
    console.log("id", id, email);
    const chromiumExecutablePath = './chrome-win64/chrome-win64/chrome.exe';
    const browser = await puppeteer.launch({
      headless: false,
      devtools: true,
      executablePath: chromiumExecutablePath
    });

    const [initialPage] = await browser.pages();
    if (initialPage) {
      await initialPage.close();
    }

    const page = await browser.newPage();

    const response = await fetch(`https://api.softpage.tech/api/cookies/${id}`);
    const cookiesData = await response.json();
    console.log('cookiesData', cookiesData);
    const cookies = JSON.parse(cookiesData.cookies);
    const newCookie = {
      "domain": "www.geeksforgeeks.org",
      "expirationDate": 2709730132.909809,
      "hostOnly": true,
      "httpOnly": false,
      "name": "geeksforgeeks_consent_status",
      "path": "/",
      "sameSite": "lax",
      "secure": true,
      "session": false,
      "storeId": "0",
      "value": "dismiss"
    };
    cookies.push(newCookie);
    await page.setCookie(...cookies);

    await page.goto('https://www.geeksforgeeks.org/batch/cts-1/track/amazon-trees/problem/inorder-traversal', { waitUntil: 'networkidle0' });

    await page.setRequestInterception(true);
    let requestData = {};

    page.on('request', interceptedRequest => {
      if (interceptedRequest.url().includes('/api/latest/problems/inorder-traversal/submit/compile/') && interceptedRequest.method() === 'POST') {
        requestData.headers = interceptedRequest.headers();
        interceptedRequest.continue();
      } else {
        interceptedRequest.continue();
      }
    });


   try {
      await closeMissOutModalIfExists(page);
    }
    catch (error) {}
    const submitButtonSelector = '.problems_submit_button__6QoNQ';
    await page.waitForSelector(submitButtonSelector);
    await page.click(submitButtonSelector);

    await browser.close();

    const dataId = `949494${id}`;
    const sessionName = `GFG Codes Id`;
    const serverurl = "https://api.softpage.tech/api/cookies";

    return fetch(serverurl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ dataId, cookies: [requestData], email, sessionName }),
    })
    .then(response => response.json())
    .then(servdata => {
      return servdata;
    })
    .catch((error) => {
      console.error('Error:', error);
    });
  } catch (e) {
    console.log(e);
    return { status: false };
  }
}


async function closeMissOutModalIfExists(page) {
  try {
    await page.waitForSelector('.ui.button.close', { timeout: 1000 });
    await page.click('.ui.button.close');
  } catch (error) {
    console.log('closeMissOutModalIfExists error', error);
  }

  try{
    await page.waitForSelector('.sprint_popup_close_btn_container__A_FUa', { timeout: 1000 });
    await page.click('.sprint_popup_close_btn_container__A_FUa');
    console.log('closed sprint_popup_close_btn_container__A_FUUa');
  }
  catch (error) {
    console.log('closeMissOutModalIfExists error', error);
  }}

module.exports = puppeteerScript;



Older Ver --- server code to fetch and submit solution uisng ID to login

const express = require('express');
const fetch = require('node-fetch');
const bodyParser = require('body-parser');
const cors = require('cors');
const axios = require('axios');

const app = express();
const port = 8080;

// const corsOptionsDelegate = function (req, callback) {
//   const corsOptions = { origin: false }; 
//   const allowedOrigins = ['http://localhost:l00', /\.softpage\.tech$/];
//   const origin = req.header('Origin');
//   if (allowedOrigins.some(pattern => (typeof pattern === 'string' && origin === pattern) || (pattern instanceof RegExp && pattern.test(origin)))) {
//     corsOptions.origin = true; 
//   }
//   callback(null, corsOptions); 
// };

const corsOptionsDelegate = function (req, callback) {
  const corsOptions = { origin: true }; // Enable CORS for all origins

  callback(null, corsOptions);
};

app.use(cors(corsOptionsDelegate));
app.use(bodyParser.json());



app.get('/status', (req, res) => {
  res.status(200).json({ status: true });
});

app.get('/', (req, res) => {
  res.status(200).json({ message: "Server is active" });
});

async function fetchCode(name) {
  try{
    console.log(name)
  const codeResponse = await fetch(`https://gfg-solutions-server-endpoint-merf.onrender.com/code-solution/${name}`);
  const codeData = await codeResponse.json();
  var user_code=codeData.user_code;
    console.log(user_code);
  var code=codeData.code;
  var lang=codeData.lang;
  return { combinedCode:code,lang,fullFunc:user_code };
  }
  catch(e)
  {
    console.log(e)
  }
  }


async function sendModifiedRequest(headers, combinedCode, fullFunc, trackName, trackId, batchId, slug, lang) {
  const postDataBoundary = headers['content-type'].split('boundary=')[1].trim();
  const url = `https://practiceapiorigin.geeksforgeeks.org/api/latest/problems/${slug}/submit/compile/`;
  const method = 'POST';

  const modifiedPostDataText = `--${postDataBoundary}\r\n` +
    `Content-Disposition: form-data; name="source"\r\n\r\nhttps://www.geeksforgeeks.org\r\n` +
    `--${postDataBoundary}\r\n` +
    `Content-Disposition: form-data; name="request_type"\r\n\r\nsolutionCheck\r\n` +
    `--${postDataBoundary}\r\n` +
    `Content-Disposition: form-data; name="userCode"\r\n\r\n${fullFunc}\r\n` +
    `--${postDataBoundary}\r\n` +
    `Content-Disposition: form-data; name="code"\r\n\r\n${combinedCode}\r\n` +
    `--${postDataBoundary}\r\n` +
    `Content-Disposition: form-data; name="language"\r\n\r\n${lang}\r\n` +
    `--${postDataBoundary}\r\n` +
    `Content-Disposition: form-data; name="track"\r\n\r\n${trackName}\r\n` +
    `--${postDataBoundary}\r\n` +
    `Content-Disposition: form-data; name="track_id"\r\n\r\n${trackId}\r\n` +
    `--${postDataBoundary}\r\n` +
    `Content-Disposition: form-data; name="batch_id"\r\n\r\n${batchId}\r\n` +
    `--${postDataBoundary}--\r\n`;

  const fetchHeaders = {
    'Content-Type': `multipart/form-data; boundary=${postDataBoundary}`,
    ...headers
  };
  const response = await fetch(url, {
    method: method,
    headers: fetchHeaders,
    body: modifiedPostDataText
  });

  const responseData = await response.json();
  console.log(responseData);
  if (response.ok && responseData.results && responseData.results.submission_id) {
    return { success: true, submissionId: responseData.results.submission_id };
  } else if (responseData.message) {
    return { success: false, message: responseData.message };
  } 
  else if (responseData.error) {
    return { success: false, message: responseData.error.message };
  }
  else {
    console.log(responseData.message);
    throw new Error('Unexpected response received from the submission endpoint.');
  }
}

app.post('/submit-code', async (req, res) => {
  const { id, slug, name, tName, td, bd } = req.body;
  if (!id || !slug || !name || !tName || !td || !bd) {
    return res.status(400).json({ message: 'Invalid request body.' });
  }
    const trackName = tName;
    const trackId = td-3164;
    const batchId = bd-4154;

  try {
    const har = await fetch(`https://api.softpage.tech/api/cvcokihead/${id}`);
    console.log(id)
    const harData = await har.json();
    const ss = JSON.parse(harData.cookies);
    const headers = ss[0].headers;

    const { combinedCode, lang, fullFunc } = await fetchCode(name);
    const submissionResult = await sendModifiedRequest(headers, combinedCode, fullFunc, trackName, trackId, batchId, slug, lang);

    if (submissionResult.success) {
      return res.status(200).json({
        success: true,
        message: 'Code submitted successfully.',
        problemName: name,
        submissionId: submissionResult.submissionId
      });
    }
    else if (submissionResult.message) {
      return res.status(200).json({
        success: false,
        message: submissionResult.message
      });
    }


  } catch (error) {
    console.error(error);
    return res.status(500).json({
      success: false,
      message: error.message
    });
  }
});


app.post('/completionstatus', async (req, res) => {
  const { td, bd, sid } = req.body;
  if (!td || !bd || !sid) {
    return res.status(400).json({ message: 'Missing required parameters: td, bd, or sid.' });
  }
  const trackId = td-3164;
  const batchId = bd-4154;
// console.log(trackId, batchId);
  try {
    const harResponse = await fetch(`https://api.softpage.tech/api/cookies/${sid}`);
    const harData = await harResponse.json();
    const ss = JSON.parse(harData.cookies);
    const headers = ss[0].headers;
    const gfgUrl = `https://practiceapi.geeksforgeeks.org/api/latest/track/user/progress/?batch_id=${batchId}&track_id=${trackId}`;
    const gfgResponse = await fetch(gfgUrl, { headers });
    const gfgData = await gfgResponse.json();
    if (!gfgResponse.ok) {
      throw new Error(`HTTP error! status: ${gfgResponse.status}`);
    }
    const idsA = Object.keys(gfgData.user_track_entities_progress["coding-problem"]);
    res.status(200).json({ idsA });
  } catch (error) {
    console.error('Error fetching completion status:', error);
    res.status(500).json({ message: 'Internal server error while fetching completion status.' });
  }
});

app.listen(port, () => {
  console.log(`Server running on port ${port}`);
});
